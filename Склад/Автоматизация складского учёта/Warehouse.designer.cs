#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Автоматизация_складского_учёта
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Склад")]
	public partial class WarehouseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertЗаказчики(Заказчики instance);
    partial void UpdateЗаказчики(Заказчики instance);
    partial void DeleteЗаказчики(Заказчики instance);
    partial void InsertЗаказы(Заказы instance);
    partial void UpdateЗаказы(Заказы instance);
    partial void DeleteЗаказы(Заказы instance);
    partial void InsertКатегории_продукции(Категории_продукции instance);
    partial void UpdateКатегории_продукции(Категории_продукции instance);
    partial void DeleteКатегории_продукции(Категории_продукции instance);
    partial void InsertПоставки(Поставки instance);
    partial void UpdateПоставки(Поставки instance);
    partial void DeleteПоставки(Поставки instance);
    partial void InsertПоставщики(Поставщики instance);
    partial void UpdateПоставщики(Поставщики instance);
    partial void DeleteПоставщики(Поставщики instance);
    partial void InsertРаботники(Работники instance);
    partial void UpdateРаботники(Работники instance);
    partial void DeleteРаботники(Работники instance);
    partial void InsertПродукции(Продукции instance);
    partial void UpdateПродукции(Продукции instance);
    partial void DeleteПродукции(Продукции instance);
    #endregion
		
		public WarehouseDataContext() : 
				base(global::Автоматизация_складского_учёта.Properties.Settings.Default.СкладConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WarehouseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WarehouseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WarehouseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WarehouseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Заказчики> Заказчики
		{
			get
			{
				return this.GetTable<Заказчики>();
			}
		}
		
		public System.Data.Linq.Table<Заказы> Заказы
		{
			get
			{
				return this.GetTable<Заказы>();
			}
		}
		
		public System.Data.Linq.Table<Категории_продукции> Категории_продукции
		{
			get
			{
				return this.GetTable<Категории_продукции>();
			}
		}
		
		public System.Data.Linq.Table<Поставки> Поставки
		{
			get
			{
				return this.GetTable<Поставки>();
			}
		}
		
		public System.Data.Linq.Table<Поставщики> Поставщики
		{
			get
			{
				return this.GetTable<Поставщики>();
			}
		}
		
		public System.Data.Linq.Table<Работники> Работники
		{
			get
			{
				return this.GetTable<Работники>();
			}
		}
		
		public System.Data.Linq.Table<Продукции> Продукции
		{
			get
			{
				return this.GetTable<Продукции>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Заказчики")]
	public partial class Заказчики : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_заказчика;
		
		private string _Наименование;
		
		private string _Адрес;
		
		private string _Телефон;
		
		private string _Электронный_адрес;
		
		private EntitySet<Заказы> _Заказы;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_заказчикаChanging(int value);
    partial void OnID_заказчикаChanged();
    partial void OnНаименованиеChanging(string value);
    partial void OnНаименованиеChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnЭлектронный_адресChanging(string value);
    partial void OnЭлектронный_адресChanged();
    #endregion
		
		public Заказчики()
		{
			this._Заказы = new EntitySet<Заказы>(new Action<Заказы>(this.attach_Заказы), new Action<Заказы>(this.detach_Заказы));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_заказчика", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_заказчика
		{
			get
			{
				return this._ID_заказчика;
			}
			set
			{
				if ((this._ID_заказчика != value))
				{
					this.OnID_заказчикаChanging(value);
					this.SendPropertyChanging();
					this._ID_заказчика = value;
					this.SendPropertyChanged("ID_заказчика");
					this.OnID_заказчикаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Наименование", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Наименование
		{
			get
			{
				return this._Наименование;
			}
			set
			{
				if ((this._Наименование != value))
				{
					this.OnНаименованиеChanging(value);
					this.SendPropertyChanging();
					this._Наименование = value;
					this.SendPropertyChanged("Наименование");
					this.OnНаименованиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Адрес", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="Char(13) NOT NULL", CanBeNull=false)]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Электронный_адрес", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Электронный_адрес
		{
			get
			{
				return this._Электронный_адрес;
			}
			set
			{
				if ((this._Электронный_адрес != value))
				{
					this.OnЭлектронный_адресChanging(value);
					this.SendPropertyChanging();
					this._Электронный_адрес = value;
					this.SendPropertyChanged("Электронный_адрес");
					this.OnЭлектронный_адресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Заказчики_Заказы", Storage="_Заказы", ThisKey="ID_заказчика", OtherKey="ID_заказчика")]
		public EntitySet<Заказы> Заказы
		{
			get
			{
				return this._Заказы;
			}
			set
			{
				this._Заказы.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Заказы(Заказы entity)
		{
			this.SendPropertyChanging();
			entity.Заказчики = this;
		}
		
		private void detach_Заказы(Заказы entity)
		{
			this.SendPropertyChanging();
			entity.Заказчики = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Заказы")]
	public partial class Заказы : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_заказа;
		
		private string _Дата_заказа;
		
		private int _Цена_заказа;
		
		private int _ID_продукции;
		
		private int _ID_заказчика;
		
		private int _ID_работника;
		
		private EntityRef<Заказчики> _Заказчики;
		
		private EntityRef<Работники> _Работники;
		
		private EntityRef<Продукции> _Продукции;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_заказаChanging(int value);
    partial void OnID_заказаChanged();
    partial void OnДата_заказаChanging(string value);
    partial void OnДата_заказаChanged();
    partial void OnЦена_заказаChanging(int value);
    partial void OnЦена_заказаChanged();
    partial void OnID_продукцииChanging(int value);
    partial void OnID_продукцииChanged();
    partial void OnID_заказчикаChanging(int value);
    partial void OnID_заказчикаChanged();
    partial void OnID_работникаChanging(int value);
    partial void OnID_работникаChanged();
    #endregion
		
		public Заказы()
		{
			this._Заказчики = default(EntityRef<Заказчики>);
			this._Работники = default(EntityRef<Работники>);
			this._Продукции = default(EntityRef<Продукции>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_заказа", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_заказа
		{
			get
			{
				return this._ID_заказа;
			}
			set
			{
				if ((this._ID_заказа != value))
				{
					this.OnID_заказаChanging(value);
					this.SendPropertyChanging();
					this._ID_заказа = value;
					this.SendPropertyChanged("ID_заказа");
					this.OnID_заказаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата_заказа", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Дата_заказа
		{
			get
			{
				return this._Дата_заказа;
			}
			set
			{
				if ((this._Дата_заказа != value))
				{
					this.OnДата_заказаChanging(value);
					this.SendPropertyChanging();
					this._Дата_заказа = value;
					this.SendPropertyChanged("Дата_заказа");
					this.OnДата_заказаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена_заказа", DbType="Int NOT NULL")]
		public int Цена_заказа
		{
			get
			{
				return this._Цена_заказа;
			}
			set
			{
				if ((this._Цена_заказа != value))
				{
					this.OnЦена_заказаChanging(value);
					this.SendPropertyChanging();
					this._Цена_заказа = value;
					this.SendPropertyChanged("Цена_заказа");
					this.OnЦена_заказаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_продукции", DbType="Int NOT NULL")]
		public int ID_продукции
		{
			get
			{
				return this._ID_продукции;
			}
			set
			{
				if ((this._ID_продукции != value))
				{
					if (this._Продукции.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_продукцииChanging(value);
					this.SendPropertyChanging();
					this._ID_продукции = value;
					this.SendPropertyChanged("ID_продукции");
					this.OnID_продукцииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_заказчика", DbType="Int NOT NULL")]
		public int ID_заказчика
		{
			get
			{
				return this._ID_заказчика;
			}
			set
			{
				if ((this._ID_заказчика != value))
				{
					if (this._Заказчики.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_заказчикаChanging(value);
					this.SendPropertyChanging();
					this._ID_заказчика = value;
					this.SendPropertyChanged("ID_заказчика");
					this.OnID_заказчикаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_работника", DbType="Int NOT NULL")]
		public int ID_работника
		{
			get
			{
				return this._ID_работника;
			}
			set
			{
				if ((this._ID_работника != value))
				{
					if (this._Работники.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_работникаChanging(value);
					this.SendPropertyChanging();
					this._ID_работника = value;
					this.SendPropertyChanged("ID_работника");
					this.OnID_работникаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Заказчики_Заказы", Storage="_Заказчики", ThisKey="ID_заказчика", OtherKey="ID_заказчика", IsForeignKey=true)]
		public Заказчики Заказчики
		{
			get
			{
				return this._Заказчики.Entity;
			}
			set
			{
				Заказчики previousValue = this._Заказчики.Entity;
				if (((previousValue != value) 
							|| (this._Заказчики.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Заказчики.Entity = null;
						previousValue.Заказы.Remove(this);
					}
					this._Заказчики.Entity = value;
					if ((value != null))
					{
						value.Заказы.Add(this);
						this._ID_заказчика = value.ID_заказчика;
					}
					else
					{
						this._ID_заказчика = default(int);
					}
					this.SendPropertyChanged("Заказчики");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Работники_Заказы", Storage="_Работники", ThisKey="ID_работника", OtherKey="ID_работника", IsForeignKey=true)]
		public Работники Работники
		{
			get
			{
				return this._Работники.Entity;
			}
			set
			{
				Работники previousValue = this._Работники.Entity;
				if (((previousValue != value) 
							|| (this._Работники.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Работники.Entity = null;
						previousValue.Заказы.Remove(this);
					}
					this._Работники.Entity = value;
					if ((value != null))
					{
						value.Заказы.Add(this);
						this._ID_работника = value.ID_работника;
					}
					else
					{
						this._ID_работника = default(int);
					}
					this.SendPropertyChanged("Работники");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Продукции_Заказы", Storage="_Продукции", ThisKey="ID_продукции", OtherKey="ID_продукции", IsForeignKey=true)]
		public Продукции Продукции
		{
			get
			{
				return this._Продукции.Entity;
			}
			set
			{
				Продукции previousValue = this._Продукции.Entity;
				if (((previousValue != value) 
							|| (this._Продукции.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Продукции.Entity = null;
						previousValue.Заказы.Remove(this);
					}
					this._Продукции.Entity = value;
					if ((value != null))
					{
						value.Заказы.Add(this);
						this._ID_продукции = value.ID_продукции;
					}
					else
					{
						this._ID_продукции = default(int);
					}
					this.SendPropertyChanged("Продукции");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Категории_продукции")]
	public partial class Категории_продукции : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_категории;
		
		private string _Категория_продукции;
		
		private EntitySet<Продукции> _Продукции;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_категорииChanging(int value);
    partial void OnID_категорииChanged();
    partial void OnКатегория_продукцииChanging(string value);
    partial void OnКатегория_продукцииChanged();
    #endregion
		
		public Категории_продукции()
		{
			this._Продукции = new EntitySet<Продукции>(new Action<Продукции>(this.attach_Продукции), new Action<Продукции>(this.detach_Продукции));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_категории", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_категории
		{
			get
			{
				return this._ID_категории;
			}
			set
			{
				if ((this._ID_категории != value))
				{
					this.OnID_категорииChanging(value);
					this.SendPropertyChanging();
					this._ID_категории = value;
					this.SendPropertyChanged("ID_категории");
					this.OnID_категорииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Категория_продукции", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Категория_продукции
		{
			get
			{
				return this._Категория_продукции;
			}
			set
			{
				if ((this._Категория_продукции != value))
				{
					this.OnКатегория_продукцииChanging(value);
					this.SendPropertyChanging();
					this._Категория_продукции = value;
					this.SendPropertyChanged("Категория_продукции");
					this.OnКатегория_продукцииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Категории_продукции_Продукции", Storage="_Продукции", ThisKey="ID_категории", OtherKey="ID_категории")]
		public EntitySet<Продукции> Продукции
		{
			get
			{
				return this._Продукции;
			}
			set
			{
				this._Продукции.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Продукции(Продукции entity)
		{
			this.SendPropertyChanging();
			entity.Категории_продукции = this;
		}
		
		private void detach_Продукции(Продукции entity)
		{
			this.SendPropertyChanging();
			entity.Категории_продукции = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Поставки")]
	public partial class Поставки : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_поставки;
		
		private string _Дата_поставки;
		
		private int _Цена_поставки;
		
		private int _ID_поставщика;
		
		private EntityRef<Поставщики> _Поставщики;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_поставкиChanging(int value);
    partial void OnID_поставкиChanged();
    partial void OnДата_поставкиChanging(string value);
    partial void OnДата_поставкиChanged();
    partial void OnЦена_поставкиChanging(int value);
    partial void OnЦена_поставкиChanged();
    partial void OnID_поставщикаChanging(int value);
    partial void OnID_поставщикаChanged();
    #endregion
		
		public Поставки()
		{
			this._Поставщики = default(EntityRef<Поставщики>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_поставки", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_поставки
		{
			get
			{
				return this._ID_поставки;
			}
			set
			{
				if ((this._ID_поставки != value))
				{
					this.OnID_поставкиChanging(value);
					this.SendPropertyChanging();
					this._ID_поставки = value;
					this.SendPropertyChanged("ID_поставки");
					this.OnID_поставкиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата_поставки", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Дата_поставки
		{
			get
			{
				return this._Дата_поставки;
			}
			set
			{
				if ((this._Дата_поставки != value))
				{
					this.OnДата_поставкиChanging(value);
					this.SendPropertyChanging();
					this._Дата_поставки = value;
					this.SendPropertyChanged("Дата_поставки");
					this.OnДата_поставкиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена_поставки", DbType="Int NOT NULL")]
		public int Цена_поставки
		{
			get
			{
				return this._Цена_поставки;
			}
			set
			{
				if ((this._Цена_поставки != value))
				{
					this.OnЦена_поставкиChanging(value);
					this.SendPropertyChanging();
					this._Цена_поставки = value;
					this.SendPropertyChanged("Цена_поставки");
					this.OnЦена_поставкиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_поставщика", DbType="Int NOT NULL")]
		public int ID_поставщика
		{
			get
			{
				return this._ID_поставщика;
			}
			set
			{
				if ((this._ID_поставщика != value))
				{
					if (this._Поставщики.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_поставщикаChanging(value);
					this.SendPropertyChanging();
					this._ID_поставщика = value;
					this.SendPropertyChanged("ID_поставщика");
					this.OnID_поставщикаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Поставщики_Поставки", Storage="_Поставщики", ThisKey="ID_поставщика", OtherKey="ID_поставщика", IsForeignKey=true)]
		public Поставщики Поставщики
		{
			get
			{
				return this._Поставщики.Entity;
			}
			set
			{
				Поставщики previousValue = this._Поставщики.Entity;
				if (((previousValue != value) 
							|| (this._Поставщики.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Поставщики.Entity = null;
						previousValue.Поставки.Remove(this);
					}
					this._Поставщики.Entity = value;
					if ((value != null))
					{
						value.Поставки.Add(this);
						this._ID_поставщика = value.ID_поставщика;
					}
					else
					{
						this._ID_поставщика = default(int);
					}
					this.SendPropertyChanged("Поставщики");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Поставщики")]
	public partial class Поставщики : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_поставщика;
		
		private string _Наименование;
		
		private string _Адрес;
		
		private string _Телефон;
		
		private string _Электронный_адрес;
		
		private EntitySet<Поставки> _Поставки;
		
		private EntitySet<Продукции> _Продукции;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_поставщикаChanging(int value);
    partial void OnID_поставщикаChanged();
    partial void OnНаименованиеChanging(string value);
    partial void OnНаименованиеChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnЭлектронный_адресChanging(string value);
    partial void OnЭлектронный_адресChanged();
    #endregion
		
		public Поставщики()
		{
			this._Поставки = new EntitySet<Поставки>(new Action<Поставки>(this.attach_Поставки), new Action<Поставки>(this.detach_Поставки));
			this._Продукции = new EntitySet<Продукции>(new Action<Продукции>(this.attach_Продукции), new Action<Продукции>(this.detach_Продукции));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_поставщика", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_поставщика
		{
			get
			{
				return this._ID_поставщика;
			}
			set
			{
				if ((this._ID_поставщика != value))
				{
					this.OnID_поставщикаChanging(value);
					this.SendPropertyChanging();
					this._ID_поставщика = value;
					this.SendPropertyChanged("ID_поставщика");
					this.OnID_поставщикаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Наименование", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Наименование
		{
			get
			{
				return this._Наименование;
			}
			set
			{
				if ((this._Наименование != value))
				{
					this.OnНаименованиеChanging(value);
					this.SendPropertyChanging();
					this._Наименование = value;
					this.SendPropertyChanged("Наименование");
					this.OnНаименованиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Адрес", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="Char(30) NOT NULL", CanBeNull=false)]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Электронный_адрес", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Электронный_адрес
		{
			get
			{
				return this._Электронный_адрес;
			}
			set
			{
				if ((this._Электронный_адрес != value))
				{
					this.OnЭлектронный_адресChanging(value);
					this.SendPropertyChanging();
					this._Электронный_адрес = value;
					this.SendPropertyChanged("Электронный_адрес");
					this.OnЭлектронный_адресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Поставщики_Поставки", Storage="_Поставки", ThisKey="ID_поставщика", OtherKey="ID_поставщика")]
		public EntitySet<Поставки> Поставки
		{
			get
			{
				return this._Поставки;
			}
			set
			{
				this._Поставки.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Поставщики_Продукции", Storage="_Продукции", ThisKey="ID_поставщика", OtherKey="ID_поставщика")]
		public EntitySet<Продукции> Продукции
		{
			get
			{
				return this._Продукции;
			}
			set
			{
				this._Продукции.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Поставки(Поставки entity)
		{
			this.SendPropertyChanging();
			entity.Поставщики = this;
		}
		
		private void detach_Поставки(Поставки entity)
		{
			this.SendPropertyChanging();
			entity.Поставщики = null;
		}
		
		private void attach_Продукции(Продукции entity)
		{
			this.SendPropertyChanging();
			entity.Поставщики = this;
		}
		
		private void detach_Продукции(Продукции entity)
		{
			this.SendPropertyChanging();
			entity.Поставщики = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Работники")]
	public partial class Работники : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_работника;
		
		private string _ФИО;
		
		private string _Адрес;
		
		private string _Дата_рождения;
		
		private string _Должность;
		
		private string _Мобильный_телефон;
		
		private string _Домашний_телефон;
		
		private string _Электронный_адрес;
		
		private EntitySet<Заказы> _Заказы;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_работникаChanging(int value);
    partial void OnID_работникаChanged();
    partial void OnФИОChanging(string value);
    partial void OnФИОChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    partial void OnДата_рожденияChanging(string value);
    partial void OnДата_рожденияChanged();
    partial void OnДолжностьChanging(string value);
    partial void OnДолжностьChanged();
    partial void OnМобильный_телефонChanging(string value);
    partial void OnМобильный_телефонChanged();
    partial void OnДомашний_телефонChanging(string value);
    partial void OnДомашний_телефонChanged();
    partial void OnЭлектронный_адресChanging(string value);
    partial void OnЭлектронный_адресChanged();
    #endregion
		
		public Работники()
		{
			this._Заказы = new EntitySet<Заказы>(new Action<Заказы>(this.attach_Заказы), new Action<Заказы>(this.detach_Заказы));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_работника", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_работника
		{
			get
			{
				return this._ID_работника;
			}
			set
			{
				if ((this._ID_работника != value))
				{
					this.OnID_работникаChanging(value);
					this.SendPropertyChanging();
					this._ID_работника = value;
					this.SendPropertyChanged("ID_работника");
					this.OnID_работникаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ФИО", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string ФИО
		{
			get
			{
				return this._ФИО;
			}
			set
			{
				if ((this._ФИО != value))
				{
					this.OnФИОChanging(value);
					this.SendPropertyChanging();
					this._ФИО = value;
					this.SendPropertyChanged("ФИО");
					this.OnФИОChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Адрес", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата_рождения", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Дата_рождения
		{
			get
			{
				return this._Дата_рождения;
			}
			set
			{
				if ((this._Дата_рождения != value))
				{
					this.OnДата_рожденияChanging(value);
					this.SendPropertyChanging();
					this._Дата_рождения = value;
					this.SendPropertyChanged("Дата_рождения");
					this.OnДата_рожденияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Должность", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Должность
		{
			get
			{
				return this._Должность;
			}
			set
			{
				if ((this._Должность != value))
				{
					this.OnДолжностьChanging(value);
					this.SendPropertyChanging();
					this._Должность = value;
					this.SendPropertyChanged("Должность");
					this.OnДолжностьChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Мобильный_телефон", DbType="Char(13) NOT NULL", CanBeNull=false)]
		public string Мобильный_телефон
		{
			get
			{
				return this._Мобильный_телефон;
			}
			set
			{
				if ((this._Мобильный_телефон != value))
				{
					this.OnМобильный_телефонChanging(value);
					this.SendPropertyChanging();
					this._Мобильный_телефон = value;
					this.SendPropertyChanged("Мобильный_телефон");
					this.OnМобильный_телефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Домашний_телефон", DbType="Char(13) NOT NULL", CanBeNull=false)]
		public string Домашний_телефон
		{
			get
			{
				return this._Домашний_телефон;
			}
			set
			{
				if ((this._Домашний_телефон != value))
				{
					this.OnДомашний_телефонChanging(value);
					this.SendPropertyChanging();
					this._Домашний_телефон = value;
					this.SendPropertyChanged("Домашний_телефон");
					this.OnДомашний_телефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Электронный_адрес", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Электронный_адрес
		{
			get
			{
				return this._Электронный_адрес;
			}
			set
			{
				if ((this._Электронный_адрес != value))
				{
					this.OnЭлектронный_адресChanging(value);
					this.SendPropertyChanging();
					this._Электронный_адрес = value;
					this.SendPropertyChanged("Электронный_адрес");
					this.OnЭлектронный_адресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Работники_Заказы", Storage="_Заказы", ThisKey="ID_работника", OtherKey="ID_работника")]
		public EntitySet<Заказы> Заказы
		{
			get
			{
				return this._Заказы;
			}
			set
			{
				this._Заказы.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Заказы(Заказы entity)
		{
			this.SendPropertyChanging();
			entity.Работники = this;
		}
		
		private void detach_Заказы(Заказы entity)
		{
			this.SendPropertyChanging();
			entity.Работники = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Продукции")]
	public partial class Продукции : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_продукции;
		
		private System.Nullable<int> _Цена_выручки;
		
		private string _Наименование;
		
		private int _Количество;
		
		private string _Статус;
		
		private int _ID_поставщика;
		
		private int _ID_категории;
		
		private EntitySet<Заказы> _Заказы;
		
		private EntityRef<Категории_продукции> _Категории_продукции;
		
		private EntityRef<Поставщики> _Поставщики;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_продукцииChanging(int value);
    partial void OnID_продукцииChanged();
    partial void OnЦена_выручкиChanging(System.Nullable<int> value);
    partial void OnЦена_выручкиChanged();
    partial void OnНаименованиеChanging(string value);
    partial void OnНаименованиеChanged();
    partial void OnКоличествоChanging(int value);
    partial void OnКоличествоChanged();
    partial void OnСтатусChanging(string value);
    partial void OnСтатусChanged();
    partial void OnID_поставщикаChanging(int value);
    partial void OnID_поставщикаChanged();
    partial void OnID_категорииChanging(int value);
    partial void OnID_категорииChanged();
    #endregion
		
		public Продукции()
		{
			this._Заказы = new EntitySet<Заказы>(new Action<Заказы>(this.attach_Заказы), new Action<Заказы>(this.detach_Заказы));
			this._Категории_продукции = default(EntityRef<Категории_продукции>);
			this._Поставщики = default(EntityRef<Поставщики>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_продукции", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_продукции
		{
			get
			{
				return this._ID_продукции;
			}
			set
			{
				if ((this._ID_продукции != value))
				{
					this.OnID_продукцииChanging(value);
					this.SendPropertyChanging();
					this._ID_продукции = value;
					this.SendPropertyChanged("ID_продукции");
					this.OnID_продукцииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Цена_выручки", DbType="Int")]
		public System.Nullable<int> Цена_выручки
		{
			get
			{
				return this._Цена_выручки;
			}
			set
			{
				if ((this._Цена_выручки != value))
				{
					this.OnЦена_выручкиChanging(value);
					this.SendPropertyChanging();
					this._Цена_выручки = value;
					this.SendPropertyChanged("Цена_выручки");
					this.OnЦена_выручкиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Наименование", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Наименование
		{
			get
			{
				return this._Наименование;
			}
			set
			{
				if ((this._Наименование != value))
				{
					this.OnНаименованиеChanging(value);
					this.SendPropertyChanging();
					this._Наименование = value;
					this.SendPropertyChanged("Наименование");
					this.OnНаименованиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Количество", DbType="Int NOT NULL")]
		public int Количество
		{
			get
			{
				return this._Количество;
			}
			set
			{
				if ((this._Количество != value))
				{
					this.OnКоличествоChanging(value);
					this.SendPropertyChanging();
					this._Количество = value;
					this.SendPropertyChanged("Количество");
					this.OnКоличествоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Статус", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Статус
		{
			get
			{
				return this._Статус;
			}
			set
			{
				if ((this._Статус != value))
				{
					this.OnСтатусChanging(value);
					this.SendPropertyChanging();
					this._Статус = value;
					this.SendPropertyChanged("Статус");
					this.OnСтатусChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_поставщика", DbType="Int NOT NULL")]
		public int ID_поставщика
		{
			get
			{
				return this._ID_поставщика;
			}
			set
			{
				if ((this._ID_поставщика != value))
				{
					if (this._Поставщики.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_поставщикаChanging(value);
					this.SendPropertyChanging();
					this._ID_поставщика = value;
					this.SendPropertyChanged("ID_поставщика");
					this.OnID_поставщикаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_категории", DbType="Int NOT NULL")]
		public int ID_категории
		{
			get
			{
				return this._ID_категории;
			}
			set
			{
				if ((this._ID_категории != value))
				{
					if (this._Категории_продукции.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_категорииChanging(value);
					this.SendPropertyChanging();
					this._ID_категории = value;
					this.SendPropertyChanged("ID_категории");
					this.OnID_категорииChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Продукции_Заказы", Storage="_Заказы", ThisKey="ID_продукции", OtherKey="ID_продукции")]
		public EntitySet<Заказы> Заказы
		{
			get
			{
				return this._Заказы;
			}
			set
			{
				this._Заказы.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Категории_продукции_Продукции", Storage="_Категории_продукции", ThisKey="ID_категории", OtherKey="ID_категории", IsForeignKey=true)]
		public Категории_продукции Категории_продукции
		{
			get
			{
				return this._Категории_продукции.Entity;
			}
			set
			{
				Категории_продукции previousValue = this._Категории_продукции.Entity;
				if (((previousValue != value) 
							|| (this._Категории_продукции.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Категории_продукции.Entity = null;
						previousValue.Продукции.Remove(this);
					}
					this._Категории_продукции.Entity = value;
					if ((value != null))
					{
						value.Продукции.Add(this);
						this._ID_категории = value.ID_категории;
					}
					else
					{
						this._ID_категории = default(int);
					}
					this.SendPropertyChanged("Категории_продукции");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Поставщики_Продукции", Storage="_Поставщики", ThisKey="ID_поставщика", OtherKey="ID_поставщика", IsForeignKey=true)]
		public Поставщики Поставщики
		{
			get
			{
				return this._Поставщики.Entity;
			}
			set
			{
				Поставщики previousValue = this._Поставщики.Entity;
				if (((previousValue != value) 
							|| (this._Поставщики.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Поставщики.Entity = null;
						previousValue.Продукции.Remove(this);
					}
					this._Поставщики.Entity = value;
					if ((value != null))
					{
						value.Продукции.Add(this);
						this._ID_поставщика = value.ID_поставщика;
					}
					else
					{
						this._ID_поставщика = default(int);
					}
					this.SendPropertyChanged("Поставщики");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Заказы(Заказы entity)
		{
			this.SendPropertyChanging();
			entity.Продукции = this;
		}
		
		private void detach_Заказы(Заказы entity)
		{
			this.SendPropertyChanging();
			entity.Продукции = null;
		}
	}
}
#pragma warning restore 1591
